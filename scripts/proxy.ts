import { ethers } from "hardhat";


async function main() {
const bytesCode1 = "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506102d7806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806313af40351461003b5780638da5cb5b14610057575b600080fd5b610055600480360381019061005091906101cd565b610075565b005b61005f610146565b60405161006c9190610209565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100fa90610281565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019a8261016f565b9050919050565b6101aa8161018f565b81146101b557600080fd5b50565b6000813590506101c7816101a1565b92915050565b6000602082840312156101e3576101e261016a565b5b60006101f1848285016101b8565b91505092915050565b6102038161018f565b82525050565b600060208201905061021e60008301846101fa565b92915050565b600082825260208201905092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061026b600983610224565b915061027682610235565b602082019050919050565b6000602082019050818103600083015261029a8161025e565b905091905056fea264697066735822122061156f8683185ef9e0ac991eec43659c479ef71a1b0a0c78c064f06cce82ede364736f6c63430008110033"
  const helper = await ethers.getContractFactory("helper");
  const Helper = await helper.deploy();

  await Helper.deployed();

  console.log(Helper.address);

  const bytesCode = await Helper.getBytecode1()
  console.log(bytesCode);

const proxy = await ethers.getContractFactory("Proxy");
const Proxy = await proxy.deploy();
await Proxy.deployed();
console.log(Proxy.address); 

const contractAddress1 = await Proxy.deploy(bytesCode1);

console.log(contractAddress1);

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
